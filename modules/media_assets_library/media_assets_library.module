<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\media_assets_library\Field\ImageStyleDownloadUrl;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_base_field_info().
 *
 * Provide thumbnail_url for json api - The relative image style url of the
 * image uri.
 */
function media_assets_library_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'file') {
    $fields['thumbnail_url'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Thumbnail image style URL'))
      ->setDescription(t('The download URL of the thumbnail image style of the image.'))
      ->setComputed(TRUE)
      ->setQueryable(FALSE)
      ->setClass(ImageStyleDownloadUrl::class);
  }
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add 'Login with AD' link to login form if ldap_sso module is installed.
 */
function media_assets_library_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#cache']['contexts'][] = 'url.query_args:destination';
  if (Drupal::moduleHandler()->moduleExists('ldap_sso')) {
    $options = [];
    $destination = Drupal::request()->query->get('destination') ?? '/';
    $options['query']['destination'] = $destination;

    $form['actions']['ldap_sso_login'] = [
      '#type' => 'link',
      '#title' => t('Login with AD'),
      '#url' => Url::fromRoute('ldap_sso.login_controller', [], $options),
      '#attributes' => ['class' => ['button']],
    ];
  }
}

/**
 * Implements hook_form_ENTITY_TYPE_presave().
 *
 * Add the DAM role to newly created AD user.
 */
function media_assets_library_user_presave(UserInterface $user) {
  if (Drupal::moduleHandler()
      ->moduleExists('ldap_user') && $user->isNew() && $user->get('ldap_user_puid')->value) {
        $user->addRole('dam');
      }
}

/**
 * Implements hook_entity_access().
 *
 * Allow file access for private image styles.
 */
function media_assets_library_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ('download' === $operation && 'file' === $entity->getEntityTypeId()) {
    $route_name = Drupal::routeMatch()->getRouteName();
    if ('image.style_private' === $route_name) {
      return AccessResult::allowed();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add filehash validation if needed to media_bulk_upload form.
 */
function media_assets_library_form_media_upload_bulk_upload_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (Drupal::moduleHandler()->moduleExists('filehash') && Drupal::config('filehash.settings')->get('dedupe')) {
    $form['#validate'][] = '_media_assets_library_media_upload_bulk_upload_validate';
  }
}

/**
 * Validate files on bulk upload with filehash_file_validate.
 */
function _media_assets_library_media_upload_bulk_upload_validate($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  if (empty($values['dropzonejs']) || empty($values['dropzonejs']['uploaded_files'])) {
    return;
  }

  $files = $values['dropzonejs']['uploaded_files'];
  $tmpFiles = [];
  foreach ($files as $key => $file) {
    // Set uri for filehash.
    $file['uri'] = $file['path'];
    $tmpFile = File::create($file);
    $tmpFiles[$key] = $tmpFile;
  }
  foreach ($tmpFiles as $key => $tmpFile) {
    $errors = filehash_file_validate($tmpFile);
    if (!empty($errors)) {
      foreach ($errors as $error) {
        drupal_set_message(t('%filename: @error', ['%filename' => $files[$key]['filename'], '@error' => $error]), 'warning');
      }
      unset($files[$key]);
    }
  }
  $values['dropzonejs']['uploaded_files'] = $files;
  $form_state->setValue('dropzonejs', $values['dropzonejs']);
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function media_assets_library_menu_links_discovered_alter(&$links) {
  // Content is not used on the site, point to media instead.
  // @see: DAM-212
  $links['system.admin_content']['route_name'] = 'entity.media.collection';
}
